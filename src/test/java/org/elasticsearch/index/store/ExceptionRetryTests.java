/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.elasticsearch.index.store;

import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import org.apache.lucene.util.LuceneTestCase;
import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;
import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
import org.elasticsearch.action.bulk.BulkItemResponse;
import org.elasticsearch.action.bulk.BulkRequestBuilder;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.action.bulk.TransportShardBulkAction;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.discovery.Discovery;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.test.ElasticsearchIntegrationTest;
import org.elasticsearch.test.transport.MockTransportService;
import org.elasticsearch.transport.*;
import org.hamcrest.Matchers;
import org.junit.Test;

import java.io.IOException;
import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicBoolean;

import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
import static org.elasticsearch.index.query.QueryBuilders.termQuery;
import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.greaterThan;

@ElasticsearchIntegrationTest.ClusterScope(scope = ElasticsearchIntegrationTest.Scope.SUITE)
public class ExceptionRetryTests extends ElasticsearchIntegrationTest {

    @Override
    protected Settings nodeSettings(int nodeOrdinal) {
        return ImmutableSettings.builder()
                .put(super.nodeSettings(nodeOrdinal))
                .put(TransportModule.TRANSPORT_SERVICE_TYPE_KEY, MockTransportService.class.getName())
                .build();
    }

    /**
     * Tests retry mechanism when indexing. If an exception occurs when indexing then the indexing request is tried again before finally failing.
     * If auto generated ids are used this must not lead to duplicate ids
     * see https://github.com/elasticsearch/elasticsearch/issues/8788
     *
     * This actually does not fail anymore!
     */
    @Test
    public void testRetryDueToExceptionOnNetworkLayerIndexAutoGeneratedIds() throws ExecutionException, InterruptedException, IOException {
        final AtomicBoolean exceptionThrown = new AtomicBoolean(false);
        int numDocs = scaledRandomIntBetween(100, 1000);
        NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get();
        NodeStats unluckyNode = randomFrom(nodeStats.getNodes());
        assertAcked(client().admin().indices().prepareCreate("index"));
        ensureGreen("index");

        //create a transport service that throws a ConnectTransportException for one bulk request and therefore triggers a retry.
        for (NodeStats dataNode : nodeStats.getNodes()) {
            MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().name()));
            mockTransportService.addDelegate(internalCluster().getInstance(Discovery.class, unluckyNode.getNode().name()).localNode(), new MockTransportService.DelegateTransport(mockTransportService.original()) {

                @Override
                public void sendRequest(DiscoveryNode node, long requestId, String action, TransportRequest request, TransportRequestOptions options) throws IOException, TransportException {
                    super.sendRequest(node, requestId, action, request, options);
                    if (action.equals(TransportShardBulkAction.ACTION_NAME) && !exceptionThrown.get()) {
                        logger.debug("Throw ConnectTransportException");
                        exceptionThrown.set(true);
                        throw new ConnectTransportException(node, action);
                    }
                }
            });
        }

        BulkRequestBuilder bulkBuilder = client().prepareBulk();
        for (int i = 0; i < numDocs; i++) {
            XContentBuilder doc = null;
            doc = jsonBuilder().startObject().field("foo", "bar").endObject();
            bulkBuilder.add(client().prepareIndex("index", "type").setSource(doc));
        }

        BulkResponse response = bulkBuilder.get();
        if (response.hasFailures()) {
            for (BulkItemResponse singleIndexRespons : response.getItems()) {
                if (singleIndexRespons.isFailed()) {
                    fail("None of the bulk items should fail but got " + singleIndexRespons.getFailureMessage());
                }
            }
        }

        refresh();
        SearchResponse searchResponse = client().prepareSearch("index").setSize(numDocs * 2).addField("_id").setVersion(true).get();

        Set<String> uniqueIds = new HashSet();
        long dupCounter = 0;
        for (int i = 0; i < searchResponse.getHits().getHits().length; i++) {
            assertThat(searchResponse.getHits().getHits()[i].version(), equalTo(1l));
            if (!uniqueIds.add(searchResponse.getHits().getHits()[i].getId())) {
                dupCounter++;
            }
        }
        assertSearchResponse(searchResponse);
        assertThat(dupCounter, equalTo(0l));
        assertHitCount(searchResponse, numDocs);
    }

    /*
    * Test if doc version is incremented by only 1 even if a retry happens.
    * This fails always if the ConnectTransportException is trown in the DelegateTransport.
    * */
    @Test
    public void testRetryDueToExceptionOnNetworkLayerIndexOp() throws ExecutionException, InterruptedException, IOException {
        final AtomicBoolean exceptionThrown = new AtomicBoolean(false);
        int numDocs = scaledRandomIntBetween(100, 1000);
        NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get();
        NodeStats unluckyNode = randomFrom(nodeStats.getNodes());
        assertAcked(client().admin().indices().prepareCreate("index"));
        ensureGreen("index");

        //create a transport service that throws a ConnectTransportException for one bulk request and therefore triggers a retry.
        for (NodeStats dataNode : nodeStats.getNodes()) {
            MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().name()));
            mockTransportService.addDelegate(internalCluster().getInstance(Discovery.class, unluckyNode.getNode().name()).localNode(), new MockTransportService.DelegateTransport(mockTransportService.original()) {

                @Override
                public void sendRequest(DiscoveryNode node, long requestId, String action, TransportRequest request, TransportRequestOptions options) throws IOException, TransportException {
                    super.sendRequest(node, requestId, action, request, options);
                    if (action.equals(TransportShardBulkAction.ACTION_NAME) && !exceptionThrown.get()) {
                        logger.debug("Throw ConnectTransportException");
                        exceptionThrown.set(true);
                        throw new ConnectTransportException(node, action);
                    }
                }
            });
        }

        BulkRequestBuilder bulkBuilder = client().prepareBulk();
        for (int i = 0; i < numDocs; i++) {
            XContentBuilder doc = null;
            doc = jsonBuilder().startObject().field("foo", "bar").endObject();
            bulkBuilder.add(client().prepareIndex("index", "type", Integer.toString(i)).setSource(doc));
        }

        BulkResponse response = bulkBuilder.get();
        if (response.hasFailures()) {
            for (BulkItemResponse singleIndexRespons : response.getItems()) {
                if (singleIndexRespons.isFailed()) {
                    fail("None of the bulk items should fail but got " + singleIndexRespons.getFailureMessage());
                }
            }
        }

        refresh();
        SearchResponse searchResponse = client().prepareSearch("index").setSize(numDocs * 2).addField("_id").setVersion(true).get();
        for (int i = 0; i < searchResponse.getHits().getHits().length; i++) {
            assertThat(searchResponse.getHits().getHits()[i].version(), equalTo(1l));// document might be indexed twice because of the retry
        }
        assertSearchResponse(searchResponse);
        assertHitCount(searchResponse, numDocs);
    }

    /*
    * Test that doc is updated only once if a retry happens.
    * This fails always if the ConnectTransportException is trown in the DelegateTransport.
    *
    * */
    @Test
    public void testRetryDueToExceptionOnNetworkLayerUpdateOp() throws Exception {
        final AtomicBoolean exceptionThrown = new AtomicBoolean(false);
        int numDocs = scaledRandomIntBetween(100, 1000);
        NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get();
        NodeStats unluckyNode = randomFrom(nodeStats.getNodes());
        assertAcked(client().admin().indices().prepareCreate("index"));
        ensureGreen("index");

        BulkRequestBuilder bulkBuilder = client().prepareBulk();
        for (int i = 0; i < numDocs; i++) {
            XContentBuilder doc = jsonBuilder().startObject().field("foo", 0).endObject();
            bulkBuilder.add(client().prepareIndex("index", "type", Integer.toString(i)).setSource(doc));
        }

        BulkResponse response = bulkBuilder.get();
        if (response.hasFailures()) {
            for (BulkItemResponse singleIndexRespons : response.getItems()) {
                if (singleIndexRespons.isFailed()) {
                    fail("None of the bulk items should fail but got " + singleIndexRespons.getFailureMessage());
                }
            }
        }

        logger.info("initial docs indexed");
        //create a transport service that throws a ConnectTransportException for one bulk request and therefore triggers a retry.
        for (NodeStats dataNode : nodeStats.getNodes()) {
            MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().name()));
            mockTransportService.addDelegate(internalCluster().getInstance(Discovery.class, unluckyNode.getNode().name()).localNode(), new MockTransportService.DelegateTransport(mockTransportService.original()) {

                @Override
                public void sendRequest(DiscoveryNode node, long requestId, String action, TransportRequest request, TransportRequestOptions options) throws IOException, TransportException {
                    super.sendRequest(node, requestId, action, request, options);
                    if (action.equals(TransportShardBulkAction.ACTION_NAME) && !exceptionThrown.get()) {
                        logger.debug("Throw ConnectTransportException");
                        exceptionThrown.set(true);
                        throw new ConnectTransportException(node, action);
                    }
                }
            });
        }

        bulkBuilder = client().prepareBulk();
        for (int i = 0; i < numDocs; i++) {
            XContentBuilder doc = jsonBuilder().startObject().field("script", "ctx._source.foo += 1").endObject();
            bulkBuilder.add(client().prepareUpdate("index", "type", Integer.toString(i)).setSource(doc));
        }

        logger.info("fire bulk request");
        response = bulkBuilder.get();
        if (response.hasFailures()) {
            for (BulkItemResponse singleIndexRespons : response.getItems()) {
                if (singleIndexRespons.isFailed()) {
                    fail("None of the bulk items should fail but got " + singleIndexRespons.getFailureMessage());
                }
            }
        }

        refresh();
        SearchResponse searchResponse = client().prepareSearch("index").setSize(numDocs * 2).addField("_id").addField("foo").setVersion(true).get();
        for (int i = 0; i < searchResponse.getHits().getHits().length; i++) {

            assertThat((Integer) (searchResponse.getHits().getHits()[i].getFields().get("foo").getValue()), equalTo(1));
            assertThat(searchResponse.getHits().getHits()[i].version(), equalTo(2l));// document might be indexed twice because of the retry
        }
        assertSearchResponse(searchResponse);
        assertHitCount(searchResponse, numDocs);
    }


    /*
    * Test that no version conflict is reported back even if a retry happens.
    * This fails always if the ConnectTransportException is trown in the DelegateTransport.
    * */
    @Test
    public void testRetryDueToExceptionOnNetworkLayerIndexOpWithVersion() throws Exception {
        final AtomicBoolean exceptionThrown = new AtomicBoolean(false);
        int numDocs = scaledRandomIntBetween(100, 1000);
        NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get();
        NodeStats unluckyNode = randomFrom(nodeStats.getNodes());
        assertAcked(client().admin().indices().prepareCreate("index"));
        ensureGreen("index");

        BulkRequestBuilder bulkBuilder = client().prepareBulk();
        for (int i = 0; i < numDocs; i++) {
            XContentBuilder doc = jsonBuilder().startObject().field("foo", 0).endObject();
            bulkBuilder.add(client().prepareIndex("index", "type", Integer.toString(i)).setSource(doc));
        }

        BulkResponse response = bulkBuilder.get();
        if (response.hasFailures()) {
            for (BulkItemResponse singleIndexRespons : response.getItems()) {
                if (singleIndexRespons.isFailed()) {
                    fail("None of the bulk items should fail but got " + singleIndexRespons.getFailureMessage());
                }
            }
        }

        logger.info("initial docs indexed");
        //create a transport service that throws a ConnectTransportException for one bulk request and therefore triggers a retry.
        for (NodeStats dataNode : nodeStats.getNodes()) {
            MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().name()));
            mockTransportService.addDelegate(internalCluster().getInstance(Discovery.class, unluckyNode.getNode().name()).localNode(), new MockTransportService.DelegateTransport(mockTransportService.original()) {

                @Override
                public void sendRequest(DiscoveryNode node, long requestId, String action, TransportRequest request, TransportRequestOptions options) throws IOException, TransportException {
                    super.sendRequest(node, requestId, action, request, options);
                    if (action.equals(TransportShardBulkAction.ACTION_NAME) && !exceptionThrown.get()) {
                        logger.debug("Throw ConnectTransportException");
                        exceptionThrown.set(true);
                        throw new ConnectTransportException(node, action);
                    }
                }
            });
        }

        bulkBuilder = client().prepareBulk();
        for (int i = 0; i < numDocs; i++) {
            XContentBuilder doc = jsonBuilder().startObject().field("foo", 0).endObject();
            bulkBuilder.add(client().prepareIndex("index", "type", Integer.toString(i)).setSource(doc).setVersion(1));
        }

        logger.info("fire bulk request");
        response = bulkBuilder.get();
        if (response.hasFailures()) {
            for (BulkItemResponse singleIndexRespons : response.getItems()) {
                if (singleIndexRespons.isFailed()) {
                    fail("None of the bulk items should fail but got " + singleIndexRespons.getFailureMessage());
                }
            }
        }

        refresh();
        SearchResponse searchResponse = client().prepareSearch("index").setSize(numDocs * 2).addField("_id").addField("foo").setVersion(true).get();
        for (int i = 0; i < searchResponse.getHits().getHits().length; i++) {
            assertThat(searchResponse.getHits().getHits()[i].version(), equalTo(2l));// document might be indexed twice because of the retry
        }
        assertSearchResponse(searchResponse);
        assertHitCount(searchResponse, numDocs);
    }


}
